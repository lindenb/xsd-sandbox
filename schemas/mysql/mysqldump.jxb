<?xml version="1.0" encoding="UTF-8"?>
<jxb:bindings 
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
	xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	jxb:extensionBindingPrefixes="ci "
	jxb:version="2.0"
	>

<jxb:bindings schemaLocation="mysqldump.xsd">
 
 
  <jxb:bindings node="/xs:schema/xs:complexType[@name='field']">
  <ci:code><![CDATA[
  
  public boolean isNil()
  	{
  	return !getNull().equals("NO");
  	}
  
  public boolean isEnum()
  	{
  	return getType().startsWith("enum(");
  	}
  	
   public boolean isSet()
  	{
  	return getType().startsWith("set(");
  	}	
  
  public String getJavaClass()
  	{
  	if(isEnum()) return "String";
  	if(isSet()) return "java.util.Set<java.lang.String>";
  	if(getType().startsWith("int"))
  		{
  		return isNil()?"java.lang.Integer":"int";
  		}
  	if(getType().startsWith("double"))
  		{
  		return isNil()?"java.lang.Float":"float";
  		}
  	return "String";
  	}
  
  
  public java.util.List<String> getEnumeration()
  	{
  	if(!isEnum() && !isSet()) throw new IllegalStateException("not an enum/set");
  	java.util.List<String> E=new java.util.ArrayList<String>();
  	
  	String t=getType().trim();
  	int par=t.indexOf("(");

  	t=t.substring(par+1);
  	t=t.substring(0,t.length()-1);//remove last parenthesis

  	try
  		{
  		java.io.StreamTokenizer st=new java.io.StreamTokenizer(new java.io.StringReader(t));
  		while(st.nextToken() != java.io.StreamTokenizer.TT_EOF){
		if(st.ttype == java.io.StreamTokenizer.TT_WORD)
		    	{
			E.add(st.sval);
		   	}
		else { E.add(String.valueOf(st.sval));}
		   	}
		return E;
  		}
  	catch(java.io.IOException err)
  		{
  		throw new RuntimeException(err);
  		}
  	}
  
 ]]></ci:code></jxb:bindings>

 <jxb:bindings node="/xs:schema/xs:complexType[@name='table_structure']">
  <ci:code><![CDATA[

   public static class Index
	   {
	   private java.util.List<Key> keys=new java.util.ArrayList<Key>();
	   private boolean internal=false;
	   public java.util.List<Key> getKeys()
	   	{
		return keys;
	   	}
	   
	   public boolean isInternal()
	   	{
	   	return internal;
	   	}
	   
	   public boolean isSingleColumn()
	   	{
	   	return getKeys().size()==1;
	   	}
	   
	   public String getName()
	   	{
		return keys.get(0).getKeyName();   
	   	}

	  @Override
	public String toString()
		{
		return getName();
		}	
	   	
	   }
  @javax.xml.bind.annotation.XmlTransient	   
  private java.util.List<Index> indexes=null;
  @javax.xml.bind.annotation.XmlTransient
  public java.util.List<Index>  getIndexes()
  	{
	  if(indexes==null)
	    {
		java.util.Map<String,Index> hash=new java.util.LinkedHashMap<String,Index>();
		for(Key k:getKey())
			{
			Index idx=hash.get(k.getKeyName());
			if(idx==null)
				{	
				idx=new Index();
				hash.put(k.getKeyName(),idx);
				}
			idx.keys.add(k);
			if(k.getTable().equals(this.getName()))
				{
				idx.internal=true;
				}
			java.util.Collections.sort(idx.keys,new java.util.Comparator<Key>()
				{
				public int compare(Key a,Key b)
					{
					return a.getSeqInIndex()-b.getSeqInIndex();
					}
				});
			}
		indexes= new java.util.ArrayList<Index>(hash.size());
		indexes.addAll(hash.values());
	   }
  	return indexes;
  	}
  	@Override
	public String toString()
		{
		return getName();
		}
]]></ci:code>
 </jxb:bindings>
</jxb:bindings>

</jxb:bindings>
